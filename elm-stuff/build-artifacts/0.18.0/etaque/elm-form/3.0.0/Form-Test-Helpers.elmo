var _etaque$elm_form$Form_Test_Helpers$run = F2(
	function (validation, stringToValidate) {
		return A3(
			_etaque$elm_form$Form_Validate$field,
			'fieldKey',
			validation,
			_etaque$elm_form$Form_Field$group(
				{
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'fieldKey',
						_1: _etaque$elm_form$Form_Field$string(stringToValidate)
					},
					_1: {ctor: '[]'}
				}));
	});
var _etaque$elm_form$Form_Test_Helpers$expectError = F4(
	function (validation, stringToValidate, expectedError, validationExpectation) {
		var _p0 = A2(_etaque$elm_form$Form_Test_Helpers$run, validation, stringToValidate);
		if (_p0.ctor === 'Ok') {
			return A2(
				_elm_community$elm_test$Expect$equal,
				validationExpectation,
				_etaque$elm_form$Form_Test_ValidationExpectation$ValidDecodesTo(_p0._0));
		} else {
			var _p1 = _etaque$elm_form$Form_Tree$valuesWithPath(_p0._0);
			if ((((_p1.ctor === '::') && (_p1._0.ctor === '_Tuple2')) && (_p1._0._0 === 'fieldKey')) && (_p1._1.ctor === '[]')) {
				return A2(
					_elm_community$elm_test$Expect$equal,
					_etaque$elm_form$Form_Test_ValidationExpectation$Invalid(expectedError),
					_etaque$elm_form$Form_Test_ValidationExpectation$Invalid(_p1._0._1));
			} else {
				return _elm_community$elm_test$Expect$fail('Unexpected form structure (this is probably a bug in this testing library).');
			}
		}
	});
var _etaque$elm_form$Form_Test_Helpers$getValidationExpectation = F2(
	function (validation, _p2) {
		var _p3 = _p2;
		var _p10 = _p3._1;
		var _p9 = _p3._0;
		var _p4 = _p10;
		switch (_p4.ctor) {
			case 'Valid':
				var _p5 = A2(_etaque$elm_form$Form_Test_Helpers$run, validation, _p9);
				if (_p5.ctor === 'Ok') {
					return _elm_community$elm_test$Expect$pass;
				} else {
					var _p6 = _etaque$elm_form$Form_Tree$valuesWithPath(_p5._0);
					if ((((_p6.ctor === '::') && (_p6._0.ctor === '_Tuple2')) && (_p6._0._0 === 'fieldKey')) && (_p6._1.ctor === '[]')) {
						return A2(
							_elm_community$elm_test$Expect$equal,
							_etaque$elm_form$Form_Test_ValidationExpectation$Valid,
							_etaque$elm_form$Form_Test_ValidationExpectation$Invalid(_p6._0._1));
					} else {
						return _elm_community$elm_test$Expect$fail('Unexpected form structure (this is probably a bug in this testing library).');
					}
				}
			case 'Invalid':
				return A4(_etaque$elm_form$Form_Test_Helpers$expectError, validation, _p9, _p4._0, _p10);
			case 'ValidDecodesTo':
				var _p7 = A2(_etaque$elm_form$Form_Test_Helpers$run, validation, _p9);
				if (_p7.ctor === 'Ok') {
					return A2(_elm_community$elm_test$Expect$equal, _p4._0, _p7._0);
				} else {
					var _p8 = _etaque$elm_form$Form_Tree$valuesWithPath(_p7._0);
					if ((((_p8.ctor === '::') && (_p8._0.ctor === '_Tuple2')) && (_p8._0._0 === 'fieldKey')) && (_p8._1.ctor === '[]')) {
						return A2(
							_elm_community$elm_test$Expect$equal,
							_etaque$elm_form$Form_Test_ValidationExpectation$Valid,
							_etaque$elm_form$Form_Test_ValidationExpectation$Invalid(_p8._0._1));
					} else {
						return _elm_community$elm_test$Expect$fail('Unexpected form structure (this is probably a bug in this testing library).');
					}
				}
			default:
				return A4(
					_etaque$elm_form$Form_Test_Helpers$expectError,
					validation,
					_p9,
					_etaque$elm_form$Form_Error$CustomError(_p4._0),
					_p10);
		}
	});
